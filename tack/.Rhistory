unique(best_users_info$first_utm_source)
user_source_table
nrow(sources_info)
nrow(users)
length(users)
users_info
users_info <- data.table()
users_info
users_info$user_id <- unique(grammarly_table$attributed_to)
users_info[user_id := unique(grammarly_table$attributed_to)]
users_info[user_id := unique(grammarly_table$attributed_to)]
user_info[,user_id:=unique(grammarly_table$attributed_to)]
users_info[,user_id:=unique(grammarly_table$attributed_to)]
users_info[,c("user_id"):=unique(grammarly_table$attributed_to)]
users_info[,user_id:=unique(grammarly_table$attributed_to)]
users_info
users_info = data.table(,y=c("user_id", "best_user","worst_user", "first_utm_source"))
?data.table
users_info[,user_id:=unique(grammarly_table$attributed_to)]
users_info[,user_id:=character()]
users_info[,user_id:=character(.N)]
vignette(package="data.table")
?vignette
vignette(package="data.table")
datatable-intro
vignette(datatable-intro, package="data.table")
vignette("datatable-intro", package="data.table")
users_info = data.table(user_id=unique(grammarly_table$attributed_to))
summary(users_info)
users_info$best_user <- seq(0,nrow(users_info))
nrow(users_info)
users_info$worst_user <- seq(0,nrow(users_info))
summary(users_info)
?seq
?repeat
)
?repeat
)
?rep
users_info$worst_user <- rep(0,nrow(users_info))
users_info$best_user <- rep(0,nrow(users_info))
summary(users_info)
users_info$first_utm_source <- rep(NA_character_,nrow(users_info))
summary(users_info)
head(users_info)
class(best_users)
users_info[best_users]
users_info[best_users,]
users_info[best_users$attributed_to,]
setkeyv(best_users,c("attributed_to"))
best_users <- data.table(best_users)
setkeyv(best_users,c("attributed_to"))
setkeyv(users_info,c("user_id"))
users_info[best_users]
users_info[best_users, best_user:=1]
summary(users_info)
nrow(users_info[best_user==1])
nrow(best_users)
worst_users
worst_users <- data.table(worst_users)
setkeyv(worst_users, c("attributed_to"))
users_info[worst_users, worst_user:=1]
summary(users_info)
users_info %>% filter(best_user==1 & worst_user==1)
View(user_source_table)
merge(users_info, grammarly_table, all.x = TRUE) %>% select(user_id)
merge(users_info, grammarly_table, all.x = TRUE,all.y = FALSE) %>% select(user_id, )
merge(users_info, grammarly_table, all.x = TRUE,all.y = FALSE) %>% select(user_id)
merge(users_info, grammarly_table, all.x = TRUE,all.y = FALSE, by.x = "user_id", by.y = "attributed_to") %>% select(user_id)
?merge
merge(users_info, grammarly_table, all.x = TRUE,all.y = FALSE, by.x = "user_id", by.y = "attributed_to", suffixes = "2") %>% select(user_id)
merge(users_info, grammarly_table, all.x = TRUE,all.y = FALSE, by.x = "user_id", by.y = "attributed_to", suffixes = c("1","2")) %>% select(user_id)
grammarly_table[,user_id:=NULL]
summary(grammarly_table)
merge(users_info, grammarly_table, all.x = TRUE,all.y = FALSE, by.x = "user_id", by.y = "attributed_to") %>% select(user_id, best_user,worst_user,first_utm_source)
merged_users_inf0 <- merge(users_info, grammarly_table, all.x = TRUE,all.y = FALSE, by.x = "user_id", by.y = "attributed_to")
View(merged_users_inf0)
?merge
?join
join(users_info, grammarly_table, by=c("user_id", "attributed_to"))
join(users_info, grammarly_table, by=c("user_id" = "attributed_to"))
inner_join(users_info, grammarly_table, by=c("user_id" = "attributed_to"))
View(sources_info)
users_to_source <- grammarly_table %>% distinct(attributed_to, first_utm_source)
View(users_to_source)
unique(users_to_source$attributed_to)
length(unique(users_to_source$attributed_to))
nrow(users_to_source)
users_to_source <- grammarly_table %>% distinct(attributed_to, first_utm_source)  %>% filter(!is.na(first_utm_source))
unique(users_to_source$attributed_to)
length(unique(users_to_source$attributed_to))
test <- grammarly_table %>% filter(!is.na(first_utm_source))
unique(test$attributed_to)
length(unique(test$attributed_to))
length(unique(users_to_source$attributed_to))
View(users_to_source)
merge(users_info, users_to_source)
merge(users_info, users_to_source, by.x = user_id, by.y = attributed_to)
merge(users_info, users_to_source, by.x = "user_id", by.y = "attributed_to")
merge(users_info, users_to_source, by.x = "user_id", by.y = "attributed_to", all.x = TRUE)
users_info <- merge(users_info, users_to_source, by.x = "user_id", by.y = "attributed_to", all.x = TRUE)
summary(users_info)
users_info[first_utm_source := first_utm_source.y]
?rename
rename(users_info, first_utm_source =  first_utm_source.y)
users_info[first_utm_source.x:=NULL]
users_info[,first_utm_source.x:=NULL]
summary(users_info)
rename(users_info, first_utm_source =  first_utm_source.y)
users_info <- rename(users_info, first_utm_source =  first_utm_source.y)
summary(users_info)
test_results <- users_info %>%
+     group_by(first_utm_source) %>%
+     summarize(p_value = t.test(users_info[best_user == 1], users_info[best_users == 0])$p.value) %>%
+ arrange(p_value)
users_info %>% group_by(first_utm_source)
test_results <- users_info %>%
group_by(first_utm_source) %>%
summarize(p_value = t.test(users_info[best_user == 1], users_info[best_users == 0])$p.value) %>%
arrange(p_value)
users_info[best_user == 1]
?t.test
test_results <- users_info %>%
group_by(first_utm_source) %>%
summarize(p_value = t.test(best_user == 1, best_users == 0)$p.value) %>%
arrange(p_value)
melt(users_info)
View(users_info)
hist(users_info[best_user==1]$first_utm_source)
summary(users_info[best_user==1]$first_utm_source)
tally(users_info[best_user==1]$first_utm_source)
ggplot(users_info[best_user==1], aes(x=first_utm_source))
ggplot(users_info[best_user==1], aes(x=first_utm_source)) +
geom_bar(stat = "identity")
qplot(users_info[best_user==1]$first_utm_source, geom = "histogram")
qplot(users_info[best_user==1]$first_utm_source, geom = "histogram", stat = "count")
qplot(users_info[best_user==1]$first_utm_source, stat = "count")
qplot(users_info$first_utm_source, geom = "histogram", stat = "count")
qplot(users_info$first_utm_source, stat = "count")
summary(users_info)
test_results <- users_info %>%
group_by(first_utm_source) %>%
summarize(p_value = t.test(best_user)$p.value)
test_results <- users_info %>%
group_by(first_utm_source) %>%
summarize(p_value = t.test(worst_user)$p.value)
na.omit(users_info$first_utm_source)
test_results <- users_info %>%
filter(!is.na(first_utm_source)) %>%
group_by(first_utm_source) %>%
summarize(p_value = t.test(worst_user)$p.value)
nrow(users_info[first_utm_source=="google"])
nrow(users_info[first_utm_source=="google"])/nrow(users_info)
nrow(users_info[first_utm_source=="google" & best_user==1])/nrow(users_info)
nrow(users_info[first_utm_source=="google" & best_user==0])/nrow(users_info)
nrow(users_info[first_utm_source=="google" & worst_user==1])/nrow(users_info)
summarize(p_value = t.test(worst_user)$p.value)
summarize(users_info,p_value = t.test(worst_user)$p.value)
test_results <- users_info %>%
filter(!is.na(first_utm_source)) %>%
group_by(first_utm_source)
VIew(test_results)
View(test_results)
grly_model <- rpart(users_info$'')
grly_model <- rpart(users_info$best_user~users_info$first_utm_source)
?rpart
library(rpart)
grly_model <- rpart(users_info$best_user~users_info$first_utm_source)
grly_model
library(rpart.plot)
plot(grly_model)
grly_model <- rpart(users_info$best_user~users_info$first_utm_source, data = users_info,control = rpart.control(maxdepth = 3))
plot(grly_model)
grly_model
?rpart
glm.model <- glm(best_user~first_utm_source,data = users_info, family = binomial)
glm.model
summary
summary(glm.model)
glm.model.worst_users <- glm(worst_user~first_utm_source,data = users_info, family = binomial)
summary(glm.model.worst_users)
summary(grly_model)
test_results <- users_info %>%
summarize(p_value = t.test(best_user[first_utm_source == "google"], best_user[first_utm_source != "google"])$p.value)
test_results
unique(users_info$first_utm_source)
for( source in unique(users_info$first_utm_source))
{}
test_results <- users_info %>%
group_by(first_utm_user)
names(users_info)
test_results <- users_info %>%
group_by(first_utm_source)  %>%
summarize(p_value = t.test(best_user)$p.value)
test_results <- users_info %>%
filter(first_utm_source) %>%
summarize(p_value = t.test(best_user)$p.value)
test_results <- users_info %>%
filter(first_utm_source=="google") %>%
summarize(p_value = t.test(best_user)$p.value)
test_results
test_results <- users_info %>%
filter(first_utm_source=="google") %>%
summarize(p_value = t.test(best_user==1,best_users==0)$p.value)
test_results
for( source in unique(users_info$first_utm_source) {
test_results <- users_info %>%
+ filter(first_utm_source==source) %>%
+ summarize(p_value = t.test(best_user==1,best_users==0)$p.value)
})
for( source in unique(users_info$first_utm_source)) {
test_results <- users_info %>%
+ filter(first_utm_source==source) %>%
+ summarize(p_value = t.test(best_user==1,best_users==0)$p.value)
}
for( source in unique(users_info$first_utm_source)) {
test_results <- users_info %>%filter(first_utm_source==source) %>%
+ summarize(p_value = t.test(best_user==1,best_users==0)$p.value)
}
for( source in unique(users_info$first_utm_source)) {
test_results <- users_info %>% filter(first_utm_source==source) %>% summarize(p_value = t.test(best_user==1,best_users==0)$p.value)
}
for( source in unique(users_info$first_utm_source)) {
print(source)
test_results <- users_info %>% filter(first_utm_source==source) %>% summarize(p_value = t.test(best_user==1,best_users==0)$p.value)
}
for( source in unique(users_info$first_utm_source)) {
if(is.na(source)) {
next
}
print(source)
test_results <- users_info %>% filter(first_utm_source==source) %>% summarize(p_value = t.test(best_user==1,best_users==0)$p.value)
}
users_info[first_utm_source=="salesmanago"]
for( source in unique(users_info$first_utm_source)) {
if(is.na(source)) {
next
}
print(source)
possibleError <- tryCatch(users_info %>% filter(first_utm_source==source) %>% summarize(p_value = t.test(best_user==1,best_users==0)$p.value),error=function(e) e )
}
for( source in unique(users_info$first_utm_source)) {
if(is.na(source)) {
next
}
possibleError <- tryCatch(users_info %>% filter(first_utm_source==source) %>% summarize(p_value = t.test(best_user==1,best_users==0)$p.value),error=function(e) e )
if(inherits(possibleError, "error")) {
print(source)
} else {
possibleError$p.value
}
}
best_users_percentage = users_info %>% group_by(first_utm_source) %>% summarise(best_converters=mean(best_user))
best_users_percentage
View(best_users_percentage)
best_users_percentage = users_info %>% group_by(first_utm_source) %>% summarise(best_converters=mean(best_user), total_users=n())
best_users_percentage = users_info %>% group_by(first_utm_source) %>% summarise(worst_convertes = mean(worst_user), best_converters=mean(best_user), total_users=n())
View(best_users_percentage)
source_info = users_info %>% group_by(first_utm_source) %>% summarise(worst_convertes = mean(worst_user), best_converters=mean(best_user), total_users=n())
View(source_info)
anova
lm.model = lm(best_users~first_utm_source, data = users_info)
anova(grly_model)
anova(glm.model)
summary(grammarly_table)
grammarly_table[used_first_time_today==TRUE & date_time < as.Date("2016-02-17")]
grammarly_table[used_first_time_today==TRUE & date_time > as.Date("2016-02-17")]
summary(grammarly_table[used_first_time_today==TRUE & date_time < as.Date("2016-02-17")])
older_users <- grammarly_table[used_first_time_today==TRUE & date_time < as.Date("2016-02-17")]
class(older_users)
older_users[best_users]
setkeyv(older_users,c("attributed_to"))
older_users[best_users]
older_users[worst_users]
older_users[-worst_users]
older_users[!worst_users]
older_users
hist(users_visiting_grammalry$num_of_days)
merge(users_info, users_visiting_grammalry, by.x = "user_id", by.y = "attributed_to", all.x = TRUE)  %>% select(names(users_info))
merge(users_info, users_visiting_grammalry, by.x = "user_id", by.y = "attributed_to", all.x = TRUE))
merge(users_info, users_visiting_grammalry, by.x = "user_id", by.y = "attributed_to", all.x = TRUE)
users_info <- merge(users_info, users_visiting_grammalry, by.x = "user_id", by.y = "attributed_to", all.x = TRUE)
lm.model <- lm(num_of_days~first_utm_source,data = users_info)
summary(lm.model)
anova(lm.model)
confint(lm.model)
lm.anova.model = data.frame(Fitted = fitted(lm.model),
Residuals = resid(lm.model), Treatment = users_info$first_utm_source)
lm.anova.model = data.frame(Fitted = fitted(lm.model),
Residuals = resid(lm.model), Treatment = users_info[!is.na(first_utm_source)]$first_utm_source)
ggplot(lm.anova.model, aes(x = group, y = weight)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Treatment Group") +
ylab("Dried weight of plants")
ggplot(lm.anova.model, aes(x = first_utm_source, y = weight)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Treatment Group") +
ylab("Dried weight of plants")
lm.anova.model
head(lm.anova.model)
ggplot(lm.anova.model, aes(Fitted, Residuals, colour = Treatment)) + geom_point())
ggplot(lm.anova.model, aes(Fitted, Residuals, colour = Treatment)) + geom_point()
summary(lm.anova.model)
View(lm.anova.model)
aov
?aov
my.aov <- aov(num_of_days~first_utm_source, data = users_info)
my.aov
summary(my.aov)
TukeyHSD(my.aov)
t-test
?t-test
t.test(formula = Times ~ Battery.Type)
t.test(formula = num_of_days~first_utm_source,data = users_info)
users_info %>% group_by(first_utm_source) %>% summarise(avg_days = mean(num_of_days))
avg_days_by_source <- users_info %>% group_by(first_utm_source) %>% summarise(avg_days = mean(num_of_days))
View(avg_days_by_source)
avg_days_by_source <- older_users %>% group_by(first_utm_source) %>% summarise(avg_days = mean(num_of_days))
class(older_users)
setkeyv(older_users, "attributed_to")
avg_days_by_source_older <- users_info[older_users] %>% group_by(first_utm_source) %>% summarise(avg_days = mean(num_of_days))
View(avg_days_by_source_older)
summary(users_info)
summary(grammarly_table)
grammarly_table %>% filter(used_first_time_today == TRUE & date_time < as.Date("2016-02-17"))
unique(grammarly_table %>% filter(used_first_time_today == TRUE & date_time < as.Date("2016-02-17")) %>% select(attributed_to))
unique(grammarly_table %>% filter(used_first_time_today == TRUE & date_time < as.Date("2016-02-20")) %>% select(attributed_to))
summary(users_info)
summary(older_users)
unique(older_users$attributed_to)
setkeyv(older_users, c("attributed_to"))
merge(users_info, older_users)
users_info[older_users]
nrow(users_info) == length(unique(users_info$user_id))
nrow(users_info[older_users])
nrow(older_users)
unique(older_users$attributed_to)
older_user_ids <- data.table(unique(older_users$attributed_to))
users_info[older_user_ids]
summary(users_info[older_user_ids])
older_users_info <- users_info[older_user_ids]
?plotmeans
older_users_info %>% group_by(first_utm_source) %>% summarise(avg_days_spent = mean(num_of_days))
avg_days_by_source <- older_users_info %>% group_by(first_utm_source) %>% summarise(avg_days_spent = mean(num_of_days))
View(avg_days_by_source)
avg_days_by_source <- older_users_info %>% group_by(first_utm_source) %>% summarise(avg_days_spent = mean(num_of_days), num_of_users = n())
View(avg_days_by_source)
boxplot(users_info$first_utm_source~users_info$num_of_days)
boxplot(users_info$num_of_days~users_info$first_utm_source)
boxplot(older_users_info$first_utm_source~older_users_info$num_of_days)
boxplot(older_users_info$num_of_days~older_users_info$first_utm_source)
points(avg_days_by_source$avg_days_spent)
boxplot(older_users_info$num_of_days~older_users_info$first_utm_source, col=rainbow(21))
aov_cont <- aov(older_users_info$num_of_days~older_users_info$first_utm_source)
summary(aov_count)
summary(aov_cont)
hist(users_info$num_of_days)
hist(log1p(users_info$num_of_days))
hist(log(users_info$num_of_days))
hist(users_info$num_of_days)
hist(log(users_info$num_of_days))
hist(log1p(users_info$num_of_days))
tuk<- TukeyHSD(aov_cont)
tuk
tuk$`older_users_info$first_utm_source`
tuk
class(tuk)
data.table(tuk)
data.frame(tuk)
tuk_results <- data.table(tuk$`older_users_info$first_utm_source`)
View(tuk_results)
names(tuk_results)
hist(users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))
hist((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days)
boxplot(users_info$num_of_days~users_info$first_utm_source, col=rainbow(21))
boxplot(older_users_info$num_of_days~older_users_info$first_utm_source, col=rainbow(21))
View(users_info)
hist((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days)
hist(log((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
hist((users_info %>% filter(first_utm_source == "facebook") %>% select(num_of_days))$num_of_days)
view(users_info)
View(avg_days_by_source)
avg_days_by_source <- older_users_info %>% group_by(first_utm_source) %>% summarise(avg_days_spent = mean(num_of_days), num_of_users = n(), stdDev = sd(num_of_days))
View(avg_days_by_source)
kruskal.test(users_info$num_of_days~users_info$first_utm_source)
avg_days_by_source <- older_users_info %>% group_by(first_utm_source) %>% summarise(avg_days_spent = mean(num_of_days), num_of_users = n(), stdDev = sd(num_of_days), num_of_best_users = sum(best_user), num_of_worst_users = sum(worst_user))
View(avg_days_by_source)
require(PMCMR)
install.packages(PMCMR)
install.packages("PMCMR")
require(PMCMR)
posthoc.kruskal.nemenyi.test(x=users_info$first_utm_source, y= users_info$num_of_days, dis dist = "Tikey")
posthoc.kruskal.nemenyi.test(x=users_info$first_utm_source, y= users_info$num_of_days, dis dist = "Tukey")
posthoc.kruskal.nemenyi.test(x=users_info$first_utm_source, y= users_info$num_of_days, dist = "Tukey")
posthoc.kruskal.nemenyi.test(x=users_info$first_utm_source, g= users_info$num_of_days, dist = "Tukey")
posthoc.kruskal.nemenyi.test(users_info$num_of_days~users_info$first_utm_source, dist = "Tukey")
hist(log((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
hist(((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
hist(1/((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
hist(ln((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
ln
hist(log2((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
hist(log10((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
hist(((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
hist(1/((users_info %>% filter(first_utm_source == "google") %>% select(num_of_days))$num_of_days))
posthoc.kruskal.nemenyi.test(x=users_info$first_utm_source, g= users_info$num_of_days, p.adjust.methods="none")
phoc_results_1 <- posthoc.kruskal.nemenyi.test(x=users_info$first_utm_source, g= users_info$num_of_days, p.adjust.methods="none")
View(phoc_results_1)
phoc_results_1$data.name
phoc_results_1$method
phoc_results_1$p.value
phoc_results_1$statistic
summary(phoc_results_1)
phoc_results_1 <- posthoc.kruskal.nemenyi.test(g=users_info$first_utm_source, x= users_info$num_of_days, p.adjust.methods="none")
summary(phoc_results_1)
clvr_data <- read.csv("~/Projects/data-analysis/clvr/data/data.csv")
clvr_table <- data.table(clvr_data)
summary(clvr_table)
dim(clvr_table)
nrow(unique(clvr_table$member_id))
length(unique(clvr_table$member_id))
clvr_data$servicing_provider_id <- as.factor(clvr_table$servicing_provider_id)
clvr_table$servicing_provider_id <- as.factor(clvr_table$servicing_provider_id)
clvr_table$member_id <- as.factor(clvr_table$member_id)
clvr_table$outcome <- as.factor(clvr_table$outcome)
clvr_table$member_sex <- as.factor(clvr_table$member_sex)
summary(clvr_table)
clvr_table$treatment_date <- as.Date(clvr_table$treatment_date)
summary(clvr_table)
?as.Date
summary(clvr_data)
clvr_table$treatment_date <- as.Date(clvr_data$treatment_date)
clvr_table$treatment_date <- as.Date(clvr_data$treatment_date, "%m/%d/%Y")
summary(clvr_table)
format(clvr_data$treatment_date, "%m/%d/%Y")
parse_date_time(clvr_data$treatment_date, orders="mdy")
parse_date_time(clvr_data$treatment_date)
parse_date_time(clvr_data$treatment_date, orders="mdy hm")
as.Date(parse_date_time(clvr_data$treatment_date, orders="mdy hm"))
clvr_table$treatment_date <- as.Date(parse_date_time(clvr_data$treatment_date, orders="mdy hm"))
clvr_table$treatment_date <- as.Date(parse_date_time(clvr_data$treatment_date, orders="mdy HM"))
summary(clvr_table)
?ifelse()
class(clvr_table$outcome)
ifelse(clvr_table$outcome == "failure", 0,1)
clvr_table$outcome <- ifelse(clvr_table$outcome == "failure", 0,1)
summary(clvr_table)
clvr_table$outcome <- as.factor(clvr_table$outcome)
summary(clvr_table)
clvr_table %>% group_by(servicing_provider_id) %>% summarise(success_rate = sum(outcome)/n())
clvr_table %>% group_by(servicing_provider_id) %>% summarise(success_rate = sum(outcome==1)/n())
unique(clvr_table$servicing_provider_id)
doc_success_rate <- clvr_table %>% group_by(servicing_provider_id) %>% summarise(success_rate = sum(outcome==1)/n())
View(doc_success_rate)
doc_success_rate <- clvr_table %>% group_by(servicing_provider_id) %>% summarise(success_rate = sum(outcome==1)/n(), num_of_cases = n())
success_rate_by_sex <- clvr_table %>% group_by(member_sex) %>% summarise(success_rate = sum(outcome==1)/n(), num_of_cases = n())
View(success_rate_by_sex)
head(clvr_table)
success_rate_by_sex <- clvr_table %>% group_by(member_sex) %>% summarise(success_rate = sum(outcome==1)/n(), num_of_cases = n(), avg_risk_assessment = mean(health_risk_assesment))
doc_success_rate <- clvr_table %>% group_by(servicing_provider_id) %>% summarise(success_rate = sum(outcome==1)/n(), num_of_cases = n(), avg_risk_assessment = mean(health_risk_assesment))
?geom_point
ggplot(doc_success_rate, aes(x= success_rate, y = avg_risk_assessment)) + geom_point(aes(size=num_of_cases))
ggplot(doc_success_rate, aes(x= success_rate, y = avg_risk_assessment)) + geom_point(aes(size=num_of_cases)) + scale_colour_gradient(low = "red")
ggplot(doc_success_rate, aes(x= success_rate, y = avg_risk_assessment)) + geom_point(aes(size=num_of_cases, color="red"))
head(clvr_table)
head(clvr_table[c(2),with=FALSE])
head(clvr_table[,c(2),with=FALSE])
head(clvr_table[,c(2,member_age),with=FALSE])
head(clvr_table[,c(2,6,7,8),with=FALSE])
clvr.tree.model <- rpart(clvr_table$outcome~., data = clvr_table[,c(2,6,7,8),with=FALSE])
rpart.plot(clvr.tree.model)
clvr.tree.model
class(clvr_table$servicing_provider_id)
ggplot(doc_success_rate, aes(x= success_rate, y = avg_risk_assessment)) + geom_point(aes(color="red"))
ggplot(clvr_table, aes(x= outcome, y = health_risk_assesment)) + geom_point(aes(color="red"))
clvr.tree.model
high_risk_patients <- clvr_table %>% filter(health_risk_assesment>=7)
summary(high_risk_patients)
ggplot(clvr_table, aes(x= member_age, y = health_risk_assesment)) + geom_point(aes(color=outcome))
summar(clvr_table)
summary(clvr_table)
boxplot(clvr_table$health_risk_assesment)
summary(high_risk_patients)
high_risk_patients.tree.model <- rpart(high_risk_patients$outcome~., data = high_risk_patients[,c(2,6,7,8),with=FALSE])
class(high_risk_patients)
high_risk_patients <- data.table(high_risk_patients)
high_risk_patients.tree.model <- rpart(high_risk_patients$outcome~., data = high_risk_patients[,c(2,6,7,8),with=FALSE])
high_risk_patients.tree.model
high_risk_patients[,c(2,6,7,8,9),with=FALSE]
clvr.glm.model <- glm(outcome~.,data = clvr_table[,c(2,6,7,8,9),with=FALSE], family = binomial)
summary(clvr.glm.model)
head(clvr.glm.model)
head(clvr_table)
clvr.glm.model <- glm(outcome~.,data = clvr_table[,c(2,8,9),with=FALSE], family = binomial)
summary(clvr.glm.model)
acs
library(acs)
install.packages("acs")
library(acs)
?acs
showClass("acs")
data(kansas09)
?data
install.packages("DBI")
install.packages("DBI")
library(DBI)
setwd("~/Projects/data-analysis/tack/")
db <- RSQLite::datasetsDb()
RSQLite
library(DBI)
RSQLite
con <- dbConnect(RSQLite::SQLite(), ":memory:")
